{"name":"iota","tagline":"iota (Inter-dependency Objective Testing Apparatus) - a tool to enforce clean separation of responsibilities in Erlang code","body":"[![Build Status](https://travis-ci.org/jpgneves/iota.png?branch=master)](https://travis-ci.org/jpgneves/iota)\r\n\r\niota\r\n====\r\n\r\niota (Inter-dependency Objective Testing Apparatus) is a tool to enforce clean\r\nseparation of responsibilities in Erlang code\r\n\r\n\r\nAPI declarations\r\n----------------\r\n\r\nA module can be declared as an API module for an application (meaning it's\r\na module other applications should invoke for functionality) in two ways.\r\n\r\nYou can explicitly declare the entire module as an API:\r\n```erlang\r\n-api(all). %% Declares all exported functions as part of the module's API.\r\n```\r\n\r\nor you can declare which exported functions are part of the API:\r\n```erlang\r\n-export([ foo/1, bar/0 ]).\r\n-api([ foo/1 ]). %% Declares only foo/1 as part of the module's API.\r\n```\r\n\r\nDeclaring the API functions implicitly declares the module as an API module,\r\nand only declaring the module as an API module implicitly declares all\r\nexported functions as part of the API.\r\n\r\nIf the module declares all its exported functions as part of its API, iota\r\nwill emit a warning.\r\n\r\nAdditionally, iota will emit warnings if you declare unexported functions\r\nas part of your API, and errors if any application calls non-API functions\r\nin modules belonging to other applications.\r\n\r\nIntra-application function calls are accepted regardless if they are declared\r\nas API or not.\r\n\r\nRunning iota\r\n------------\r\n\r\nYou can run iota simply by doing (all examples use the applications provided\r\nin ```priv```):\r\n\r\n    $ make escriptize\r\n    $ ./iota check priv/test_app1\r\n    ERROR: test_app2_mod:baz/0 calls non-API function test_app1_mod:xpto/2\r\n\r\n    ERROR: test_app1_mod:foo/0 calls non-API module test_app2_mod\r\n\r\n    ===== iota report =====\r\n    {test_app1_mod,foo,0} - Errors: 1, Warnings: 0\r\n    {test_app2_mod,baz,0} - Errors: 1, Warnings: 0\r\n    =======================\r\n    Total - Errors:2 Warnings:0\r\n\r\nPlease note that your application must be compiled before, as iota uses xref for the more\r\nmeaningful checks and your declarations need to be baked in as well. :)\r\n\r\nYou can also ask iota to describe the API of all applications on the given path\r\nfor you:\r\n\r\n    $ ./iota describe_api priv/test_app1\r\n    ===== iota report =====\r\n    API for test_app1:\r\n      [{test_app1_mod,xpto,1}]\r\n    API for test_app2:\r\n      []\r\n\r\nWhitelisting applications\r\n-------------------------\r\n\r\nIt's possible to whitelist applications from the checks, for applications\r\nthat do not and will not have iota annotations (e.g. third-party libraries).\r\n\r\nTo do so, in the root of your top-level application, create a\r\n```iota.config``` file and include the following:\r\n```erlang\r\n{ignore_apps, [app1, app2]}.\r\n```\r\nwhere ```[app1, app2]``` are the applications you wish to whitelist.\r\n\r\nSetting library path\r\n--------------------\r\n\r\nIn your ```iota.config``` file, use the following to set your library path:\r\n```erlang\r\n{lib_dirs, [\"deps\"]}.\r\n```\r\n\r\nIf not set, ```lib_dirs``` defaults to ```/path/to/app/lib```.\r\n\r\nFuture work\r\n-----------\r\n\r\n* Add support for more kinds of checking (e.g. layer checks through external\r\ndeclarations)\r\n* Plugins for various tools (e.g. rebar, EDTS)\r\n\r\n\r\nNOTE\r\n----\r\n\r\nWhen running ```make test``` you'll see that the coverage of some modules is\r\nvery low. This is due to the use of\r\n[moka](https://github.com/samuelrivas/moka) for mocking.\r\n\r\nAcknowledgements\r\n----------------\r\n\r\nThanks to [Samuel Rivas](https://github.com/samuelrivas) for\r\n[moka](https://github.com/samuelrivas/moka) and\r\n[HÃ¥kan Nilsson](https://github.com/plux) for\r\n[docopt-erl](https://github.com/plux/docopt-erl).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}